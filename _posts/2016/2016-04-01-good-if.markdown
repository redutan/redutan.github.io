---
layout: post
title: 좋은 분기문(if) 작성법
date: '2016-04-01 17:17'
---

분기문이 객체지향적 사고를 방해한다고 하였지만, 역으로 프로그래밍에서 논리 처리를 위해서 분기문은 필수로 필요합니다.

하지만 분기문을 적절하게 사용하지 못하면 가독성을 방해하고 유지보수 하기 힘든 코드로 만듭니다. 이와 관련해서
특히 분기문을 통해서 유효성 처리를 하는 경우 적절한 분기처리 숙어(idiom)를 알려드리겠습니다.

## 기존
{% highlight java %}
void initialize() {
    if (!isInitialized()) {
        // 적절한 초기화 로직
    }
}
{% endhighlight %}

## 개선
{% highlight java %}
void initialize() {
    if (isInitialized()) {
        return;
    }
    // 적절한 초기화 로직
}
{% endhighlight %}

기존과 개선을 비교하면 도찐개찐 인 거 같습니다. 하지만 두번째 예제를 보면 생각이 달라질 겁니다.

## 기존 - 중첩 if
{% highlight java %}
void compute() {
    Server server = getServer();
    if (server != null) {
        Client client = server.getClient();
        if (client != null) {
            Request current = client.getRequest();
            if (current != null) {
                // 실제 처리할 로직
                processRequest(current);
            }
        }
    }
}
{% endhighlight %}

## 개선 - 중첩 if
{% highlight java %}
void compute() {
    Server server = getServer();
    if (server == null)
        return;
    Client client = server.getClient();
    if (client == null)
        return;
    Request current = client.getRequest();
        return;
    // 실제 처리할 로직    
    processRequest(current);
}
{% endhighlight %}

기존과 개선의 차이가 느껴지십니까?

일반적으로 개발할 시 긍정적(유효한) 상황을 염두하고 개발을 진행하게 됩니다.
그래서 계속 적으로 유효성 체크 로직이 포함할 시에는 마치 계층(hierarchy) 구조를 보는 것 같습니다. - 기존

하지만 이를 역으로 **부정적(유효하지 않는 상황) 상황을 염두하고 분기처리하면 선형(linear) 구조를 취합니다.** - 개선

고로 더 나은 가독성과 구조를 제공하는 것입니다.

> 이를 **보호절** 숙어라고 부르는데 실제 처리할 로직이 처리되기 전에 유효하지 않는 상황으로 분기되면
해당 지역(메서드, 루프 블록 등)을 벗어나게 하는 것입니다. 보통 return을 하거나 예외(Exception)를 발생시킵니다.


# 그럼 loop 구문 내 분기는 어떻게 처리하면 될까요?

{% highlight java %}
while (line = reader.readline()) {
    if (line.startsWith('#') || line.isEmpty())
        continue;
    // 실제 처리할 로직
}
{% endhighlight %}

`continue`를 이용하면 유사하게 처리할 수 있습니다.

> 참고 : 구현패턴[켄드 백] - 보호절
