---
layout: "post"
title: "클린소프트웨어 Part 1. 애자일 개발"
date: "2017-06-06 15:24"
tags:
    - books
    - clean-software
---

# Chapter 1. 애자일 실천방법(practice)

**계속되는 악순환**

1. 많은 프로젝트가 실천방법 없이 프로젝트를 진행한다.
2. 그로 인해 실패를 경험하게 되고 결과물을 요구하는 프로세스가 생긴다.
3. 하지만 까다롭고 많은 프로세스는 오히려 복잡하게 만드는 **계속되는 악순환** 이 생긴다.
    * 이는 *소프트웨어 위기* 와 연결된다.
4. 아이러니 하게도 위와 같은 프로세스를 채택하는 회사가 빠르게 늘어낫다 - 큰 회사일 수록 더 심함

## 애자일 연합

### 애자일 소프트웨어 개발 선언문

* **프로세스와 툴보다 개인과 상호작용이우선이다.**
    * 프로그래밍 실력은 평범하지만 서로 잘 대화하는 팀이 성공할 가능성이 높다.
    * 팀을 만들기 위해 노력하고 그런 뒤에 팀의 필요를 기반으로 환경을 구축하자.
* **포괄적인 문서보다 동작하는 소프트웨어가 우선이다.**
    * 설계 원리와 구조에 대한 문서를 쓰고 유지하되, *짧고 요약적* 이어야 한다.
    * 그 필요가 급박하고 중요하지 않다면 아무 문서도 만들지 마라
* **계약 협상보다 고객 협력이 우선이다.**
    * 자주 고객의 피드백을 받아야 한다.
    * 하지만 일반적인 갑을 관계에서 고객 협력이 우선되면 그로 인한 피해는 어떻게 해야할까?
* **계획에 따르는 것 보다 변화에 대한 반응이 우선이다**
    * 우선순위 변경에 따라서 변화가 우선한 경우에는 이에 따라야 하는 것이 우선이다.
    * *계약 협상보다 고객 협력이 우선이다* 와 연결되는 내용인 것 같다.

## 원칙

* **우리의 최고 가치는 유용한 소프트웨의 빠르고 지속적인 공개를 통해 고객을 만족시키는 것이다.**
    * 첫 공개본에서 기능하는 부분이 적을수록 최종 공개본의 품질이 높이진다. : ?? 하지만 애자일에는 위배되는 것 같다.
    * 자주 공개할 수록 최종 품질도 좋았다. - OK
* **개발 후반부에 접어들었다 할지라도, 요구사항 변경을 환영하라**
    * 팀은 소프트웨어의 구조를 탄력적으로 유지하기 위해서 노력한다.
* **개발 중인 소프트웨어를 자주 공개하라**
    * 2주에서 2달사이, 혹은 더 짧은 시간 간격으로
* **업무를 하는 사람과 개발자는 계속 함께 일해야 한다.**
* **의욕적인 개인들을 중심으로 프로젝트를 구성하라. 환경과 필요로 하는 지원을 제공하고 그들이 그 일을 해낼 것이라 믿고 맡겨둬라.**
* **개발 팀 내에서 정보를 전달하고 옹유하는 가장 효율적이고 효과적인 방법은 직접 일대일로 대화하는 것이다.**
* **개발 중인 소프트웨어가 진척 상황의 일차적 척도다.**
* **애자일 프로세스는 지속 가능한 개발을 촉진한다. 스폰서, 개발자, 사용자는 무한히 지속적인 pace를 유지할 수 있어야 한다.**
    * 애자일 프로젝트는 마라톤이다.
* **우수 기술과 좋은 설계에 대한 지속적인 관심은 속도를 향상한다.**
* **단순성(아직 끝내지 않은 일의 양을 최대화하는 예술)은 필수적이다.**
* **최고의 아키텍쳐, 요구사항, 설계는 자기 조직적인 팀에서 나온다.**
* **규칙적으로 팀은 좀 더 효과적인 방법을 반영해야 하고, 적절히 그 행위를 조율하고 조정해야 한다.**

## 결론

* 프로세스가 늘어나는 악순환은 실패의 원인이다.
* 애자일은 간단한 테크닉에 초점을 맞추는 것을 돕기 위한 방법으로서 만들어졌다.

# Chapter 2. 익스트림 프로그래밍 소개

# Chapter 3. 계획 세우기

# Chapter 4. 테스트 주도 개발

# Chapter 5. 리팩토링

# Chapter 6. 프로그래밍 에피소드
