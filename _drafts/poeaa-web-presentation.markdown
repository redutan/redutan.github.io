---
layout: "post"
title: "POEAA : 웹 프레젠테이션 패턴 (1)"
date: "2016-04-08 00:34"
tags:
    - book
    - POEAA
---

# MVC

_사용자 인터페이스 상호 작용을 세 가지(모델, 뷰, 컨트롤러) 독립적인 역할로 분할한다._



## Model

- 모델은 도메인에 대한 정보 (도메인객체)
- UI에 직접 사용되지 않는 모든 데이터와 동작을 포함하는 비시각적 객체
    - **트랜젝션 스크립트도 모델이라고 간주할 수 있다.**

## View

UI에서 모델을 표시

## Controller

사용자로부터 입력을 받고, 모델을 조작하며, 뷰를 적절하게 업데이트 한다. UI는 뷰와 컨트롤러의 조합으로 작동한다.

## 분리

**MVC의 핵심 개념은 프레젠테이션을 모델에서 분리하고, 컨트롤러를 뷰에서 분리하는 두가지 분리다.**

### 1. 프레젠테이션에서 모델 분리

프레젠테이션 -> 모델로 단방향 의존

중요한 것은 모델 작업을 진행하면서 어떤 프레젠테이션을 사용하는지 알 필요가 없다는 것이다. 즉 프레젠테이셔은 유연하게 변경할 수 있다.

_하지만 이벤트 통보(notify)라는 개념으로 모델에서 뷰로 의존이 가능하다._

### 2. 컨트롤러를 뷰에서 분리

어떤 프레임워크에서는 컨트롤러와 뷰를 분리하지 않기도 한다.

하나의 뷰 하나에 컨트롤러 2개를 사용하면 컨트롤러가 뷰에 대한 전략 역할을 한다.
예를 들면 뷰 하나를 수정과 입력 컨트롤러 사용한다. 그 반대로 컨트롤러가 복수개의 뷰를 분기해서 사용할 수 있다.

# 페이지 컨트롤러

_웹 사이트에서 특정 페이지나 동작에 대한 요청을 처리하는 객체_

일반적인 컨트롤러(`@Controller`)를 말한다.

단순하게 하나의 서버페이지를 사용할 경우 스크립트릿 코드(`<% ... %>`)를 사용할 수 있다.
하지만 헬퍼 객체를 사용해서 논리적 처리(Controller처리)를 담당하고 서버페이지(View)를 분리할 수 있다.

## 기본역할

- 작업에 필요한 데이터 추출
- 처리 : 모델 객체를 생성하고 호출. Request와 같은 요청객체 의존성이 없어야함
- 뷰 결정 후 모델 전달


# 프런트 컨트롤러

_웹 사이트의 모든 요청을 처리하는 컨트롤러_

프론트 컨트롤러(Front Controller)는 모든 요청을 단일 처리기 객체로 집중하는 방법으로 요청을 통합 처리한다.
이 객체는 공통적인 동작을 수행하고 데코레이터(decorator)를 사용해 런타임에 수정할 수 있다.
