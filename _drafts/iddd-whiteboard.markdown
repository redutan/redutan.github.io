---
layout: "post"
title: "IDDD whiteboard time"
date: "2016-04-24 14:48"
tags:
    book
    ddd
---

# 2장 도메인, 서비도메인, 바운디드 컨텍스트

## 도메인 모델 그리기

![서브도메인과 바운디드 컨텍스트를 포함하는 추상적인 비즈니스 도메인](/images/2016/04/IDDD-2.2.jpg)

_그림 2.2 서브도메인과 바운디드 컨텍스트를 포함하는 추상적인 비즈니스 도메인_

- 한 열에는 여러분의 일상에서 알고 있는 모든 서브도메인 목록을 작성하자. 다른 열에는 바운디드 컨텍스트의 목록을 기입하자. 다양한 바운디드 컨텍스트와 서브도메인이 겹치는가? 그렇다면, 이는 나쁜 일이 아니며 단순히 기업 소프트웨어의 한 가지 사실일 뿐이다.
- 이제 그림 2.2의 양식을 사용해 서브도메인, 바운디드 컨텍스트, 이 둘 사이의 통합 관계와 함께 여러분이 속한 기업의 소프트웨어의 이름을 적자.

> 어려웠는가? 아마도 그랬을 텐데, 그림 2.2.의 양식이 여러분의 도메인에 존재하는 경계를 밀접하게 반영하지 못했기 때문이다.

- 다시 시작하라. 이번에는 여러분의 도메인, 서브도메인, 바운디드 컨텍스트를 함께 묶어서 정리한 다이어그램을 그려야한다. 그림 2.2.의 기법을 사용하되, 여러분의 상황에 맞추자.

> 물론 여러분이 전체 기업의 모든 서브도메인과 바운디드 컨텍스트에 관한 모든 것을 알기 힘들수도 있다. 아마 여러분은 일상적으로 처리하는 요소를 알아낼 수 있을 것이다(특히 여러분의 도메인이 크고 복잡하다면). 어쨋거나 한 번 해보자. 틀리는 것을 두려워하지 말자. 여러분은 컨텍스트 맵을 그리는 경험을 하데 되며, 이는 3장에서 더욱 정제될 것이다. 좀 더 자세한 조언을 얻길 원한다면 잠시 3장의 내용을 살펴봐도 좋다. 그러나 지금 당장은 완벽해지는 것에 관해 걱정하지 말자. 기초적인 아이디어를 먼저 잡자.

## 문제점 공간

잠깐 멈춰서 여러분의 화이트보드를 살펴보고 생각해보자. 여러분의 문제점 공간은 무엇인가? 이는 전략적 핵심 도메인과 이를 지원하는 서브도메인의 조합이라는 점을 기억하자.

## 해결책 공간

여러분의 해결책 공간에서 바운디드 컨텍스트는 무엇인가? 여기서 여러분은 아이디어를 얻기 위해 여러분의 화이트보드 다이어그램으로 돌아가야한다. 바운디드 컨텍스트를 올바르게 사용하는 방법을 좀 더 깊이 파고든다면 다시 한 번 좀 더 놀라게 될지도 모른다. 그러니 일어날 수 있는 정제 작업을 준비하자. 우리는 어쨋거나 애자일 개발을 하고 있는 중이다.

### 문제점 공간과 해결책 공간

도메인은 문제점 공간(problem space)과 해결책 공간(solution space)을 모두 갖고 있다.

*문제점 공간*

- 문제점 공간은 새로운 핵심 도메인을 만들기 위해 개발하는 전체 도메인의 일부다.
- **핵심 도메인과 핵심 도메인이 사용하는 서브도메인의 조합이다.**

*해결책 공간*

- 하나 이상의 바운디드 컨텍스트이며 구체적인 소프트웨어 모델의 집합이다.
- 개발된 바운디드 컨텍스트는 특화된 해결책이자 실제 구현을 비추는 창이기 때문이다.

## 개념 식별

- 도메인 안의 여러 바운디드 컨텍스트에 존재하는 미묘하게 차이나는 개념을 식별할 수 있는지 보라.
- 개념이 제대로 분리됐는지 아니면 개발자가 둘 모두에 코드를 단순히 복사했는지 판단하라.

> 일반적으로, 비슷한 객체도 서로 다른 속성과 오프레이션을 갖고 있기 때문에 제대로 분리됐는지 판단할 수 있다. 그렇다면 경계가 개념을 적절하게 분리한 것이다. 하지만 만약 다수의 컨텍스트에서 정확히 같은 객체를 볼 수 있다면, 두 바인디드 컨텍스트가 공유커널(shared kernel)을 사용하고 있지 않는 이상 모델링에 오류가 있다는 뜻이다.

## 바운디드 컨텍스트

![바운디드 컨텍스트](/images/2016/04/IDDD-2.3.jpg)

_그림 2.3 바운디드 컨텍스트_

- 화이트보드 다이어그램에서 식별된 각각의 바운디드 컨텍스트를 살펴보자. 이를 고려할 때, 경계 안에 존재하는 도메인 모델 외의 다른 컴포넌트를 생각할 수 있는가?
- 만약 사용자 인터페이스와 애플리케이션 서비스의 집합이 있다면, 그들이 경계 안에 있도록 하라. (표현 방법에 융통성을 간자. 그림 2.8과 2.9, 2.10을 보면 다양한 컴포넌트를 표현하는 몇가지 아이디어를 얻을 수 있다.)
- 여러분의 모델을 위해 데이터베이스 스키마나 다른 영속성 저장소를 개발한 경우, 이 또한 경계 안에 두도록 하자. (그림 2.8과 2.9, 2.10에서 데이터베이스 스키마를 표현하는 방법을 보여준다.)

# 3장 컨텍스트 맵

## 컨텍스트 맵 그리기

경계의 위치, 경계와 팀 사이의 관계, 포함돼 있는 통합의 유형, 이들 사이에 필요한 변환이 무엇인지 높은 수준에서 이야기하며 현재 프로젝트의 상태를 간단히 다이어그램으로 그려보자.

> 이 그림의 내용을 소프트웨어가 구현한다는 점을 기억하자. 무엇을 그려야 할지 정보가 더 필요하다면, 여러분의 바운디드 컨텍스트가 함께 통합될 시스템도 고려해보자.

## 컨텍스트 맵 정제

- 여러분의 바운디드 컨텍스트를 생각해보자. 그 컨텍스트에 속하지 않는 개념을 식별할 수 있는가? 그렇다면, 새로운 컨텍스트 맵을 그려서 올바른 컨텍스트의 모습과 컨텍스트 사이의 관계를 나타내자.
- 아홉가지 DDD 조직과 통합 관계 중 무엇을 선택할 것이며 그 이유는 무엇인가?

## 출처

- [그림 2.2 출처](https://www.safaribooksonline.com/library/view/implementing-domain-driven-design/9780133039900/ch02lev2sec2.html)
- [그림 2.3 출처](https://www.youtube.com/watch?v=aieoAWXNjl0)
