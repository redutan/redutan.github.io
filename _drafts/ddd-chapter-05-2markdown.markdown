---
layout: post
title: DDD 05장 - 소프트웨어에서 표현되는 모델 (2)
date: "2015-10-30 23:44"
tags: "ddd"
---

## Service

도메인의 개념 중 사물(도메인객체)이 아닌 활동이나 행동(연산)로 표현되는 모델링 대상

종종 이러한 연산은 여러 도메인 객체(Entity, Value Object)를 모아 그것들을 조율하는 행위

**Service는 모델에서 독립적인 인터페이스로 제공되는 연산으로서 Entity나 Value Object와 달리 상태를 캡슐화 하지 않는다.
Service는 흔히 사용되는 패턴이지만 Service는 도메인 계층에도 마찬가지로 적용될 수 있다.**

- 모델에서 독립적인 인터페이스로 제공되는 연산
  - 클라이언트에 무엇을 제공할 수 있느냐?
- 상태를 캡슐화 하지 않음 : 연산 자체가 상태를 가질 필요가 없으므로 캡슐화 할 상태도 없는 것이다.

*Service의 3가지 특징*

- 연산이 원래부터 Entity나 Value Object의 일부를 구성하는 것이 아니라 도메인 개념과 관련돼 있다.
- 인터페이스가 도메인 모델의 외적 요소의 측면에서 정의된다. : Actor 즉, Use case diagram의 그것와 비슷??
- 연산이 상태를 갖지 않는다. : **연산에 영향을 주는 상태를 갖지 않는다** 로 이해하면 편하다.
  - 하지만 특정 도메인의 경우 전역정보로 인한 사이드 이펙트는 있을 수 있다

*요약*

**도메인의 중대한 프로세스나 변환 과정이 Entity나 Value Object의 고유한 책임이 아니라면 연산을 Service로 선언되는 독립적인 인터페이스로 모델에 추가하라.
모델의 언어라는 측면에서 인터페이스를 정의하고 연산의 이름을 Ubiquitous Language의 일부가 되게끔 구성하라.
Service는 상태를 갖지 않게 만들어라.**

#### Service와 격리된 도메인 계층
