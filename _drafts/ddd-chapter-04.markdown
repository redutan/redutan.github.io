---
layout: post
title: "DDD 04장 - 도메인의 격리"
date: "2015-10-05 13:04"
tags: "ddd"
---

## LAYERED ARCHITECTURE (계층형 아키텍처)

**도메인과 관련없는 코드들이 각 계층에 산재하게 되면?**

- 응집력 있고, 모델 주도적인 객체를 구현하는 것이 비현실적인 이야기가 돼버린다.
- 자동화 테스트가 어렵다.
- 도메인에 관련된 코드를 확인하고 추론하기가 굉장히 힘들어진다.

**이를 해결하기 위해서는**

- 관심사의 분리 (separation of concern)
- 즉, 계층 분리

**계층화의 핵심원칙**

- 한 계층의 모든 요소는 오직 같은 계층에 존재하는 다른 요소나 계층상 **아래** 에 위치한 요소에만 의존한다.
- 위로 거슬러 올라가는 의사소통은 반드시 간접적인 매커니즘을 거쳐야 한다.

**계층화의 가치 (장점)**

- 응집력 강화
- 이해도 향상

#### 대표적인 4계층 아키텍처

###### 사용자 인터페이스 (표현 계층)

###### 응용 계층

- 소프트웨어가 수행할 작업을 정의하고 표현력 있는 도메인 객체가 문제를 해결하게 한다. - 일종의 위임과 상호작용
- **실제 업무를 처리하는 것은 아래 도메인 계층에서 한다.** 또한 **상태를 가질 수도 없다.**
- **트랜젝션** 관리가 이 계층에서 이루어진다.

###### 도메인 계층 (모델 계층)

- 실제 업무 처리. 업무용 소프트웨어의 핵심 계층

###### 인프라스트럭쳐 계층

- 메세지 전송
- 도메인 영속화 (예를 들면 DB 저장)

#### 계층화

**MODEL-DRIVEN DESIGN을 가능하게 하는 것은 결정적으로 도메인 계층 분리**

- 복잡한 프로그램을 여러 개의 계층으로 나눠라.
- 응집력 있고 오직 아래에 위치한 계층에만 의존하는 각 계층에서 설계를 발전시켜라.
- 표준 아키텍처 패턴에 따라 상위 계층과 결합을 느슨하게 유지하라.
- 도메인 모델과 관련된 코드는 모두 한 계층에 모으로 사용자 인터페이스 코드나, 어플리케이션 코드, 인프라스트럭처 코드와 격리하라.
- 도메인 객체(표현이나 저장, 애플리케이션 작업을 관리하는 등의 책임에서 자유로운)는 도메인 모델을 표현하는 것에만 집중할 수 있다.

**계층화 결론**

모델은 진화를 거듭해 본질적인 업무 지식을 포착해서 해당 업무 지식이 효과를 발휘할 수 있을 만큼 풍부하고 명확해질 것이다.

## 계층 간 관계 설정
