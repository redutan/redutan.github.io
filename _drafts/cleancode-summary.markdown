---
layout: "post"
title: "클린코드 정리와 의문"
date: "2016-06-03 14:29"
tags:
    - book
    - clean-code
---

# 정리

## 시스템

**'처음부터 올바르게' 시스템을 만들 수 있다는 믿음은 미신이다.**

## 창발성

**단순한 설계 규칙**

1. 모든 테스트를 실행한다.
2. 중복을 없앤다.
3. 프로그래머 의도를 표현한다.
4. 클래스와 메서드 수를 최소로 줄인다. (중복제거)

_2~4는 리팩터링을 통해 개선 가능_

**중복은 추가작업, 추가 위험, 불필요한 복잡도를 뜻한다.**

**좋은 표현 규칙**

1. 좋은 이름
2. 함수와 클래스 크기를 가능한 줄인다. (for SRP)
3. 표준 명칭을 사용한다.
4. 단위 테스트 - 예제 문서

_하지만 가장 중요한 것은 위 규칙을 실천하고자 하는 노력_

## 동시성

**동시성과 깔끔한 코드는 양립하기 어렵다. 아주 어렵다.**

**동시성은 결합(coupling)을 없애는 전략이다. 즉, 무엇(what)과 언제(when)를 분리하는 전략이다.**

**동시성 방어 원칙**

1. 동시성 코드는 다른 코드와 분리하라
2. 자료를 캡슐화하라. 공유 자료를 최대한 줄여라
3. 자료 사본을 사용하라
4. 쓰레드는 가능한 독립적으로 구현하라

## 동시성 II

프로그램에서 스레드 관련 코드를 분리하면 조율과 실험이 가능하므로 통찰력이 높아져 최적의 전략을 찾기 쉬워진다.

_[Multicore SDK][af165db1] 라는 제품을 통해서 동시성 테스트가 조금 더 쉬워진다_

  [af165db1]: https://www.ibm.com/developerworks/community/groups/service/html/communityview?communityUuid=9a29d9f0-11b1-4d29-9359-a6fd9678a2e8 "Multicore SDK"

[서버-클라이언트 샘플코드][756c1078]

  [756c1078]: https://github.com/redutan/simple-server-client-clieancode/ "서버-클라이언트 샘플코드"

# 의문

## 창발성

**p.216**

클래스와 메서드 수를 최소로 줄인다.

> 단순한 설계 규칙이라고 했는데, 클래스와 메서드의 크기를 줄이는 것이 더 낫다고 생각한다. 아마 중복되는 클래스나 메서드를 줄이라는 의미인 것으로 해석된다.
