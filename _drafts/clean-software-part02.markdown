---
layout: "post"
title: 클린소프트웨어 Part 2. 애자일 설계
date: "2017-06-07 18:30"
tags:
  - books
  - clean-software
---

# 서론

지금 당장을 위해서 설계와 구현을 동시에 진행한다.

### 잘못된 설계의 증상

* 경직성(Rigidity) : 설계를 변경하기 어려움
* 취약성(Fragility) : 설계가 망가지기 쉬움
* 부동성(Immobility) : 설계를 재사용하기 어려움
* 점착성(Viscosity) : 제대로 동작하기 어려움
* 불필요한 복잡성(Needless Complexity) : 과도한 설계
* 불필요한 반복(Needless Repetition) : 마우스 남용
* 불투명성(Opacity) : 혼란스러운 표현

### 원칙

[SOLID][e29eaf06]

  [e29eaf06]: https://ko.wikipedia.org/wiki/SOLID "SOLID"

### 악취와 원칙

정말 소중한 원칙이지만, **원칙에 대한 맹종은 불필요한 복잡성이란 설계의 악취로 이어진다**

# Chapter 7. 애자일 설계란 무엇인가?

> 설계는 우선적으로 소스 코드에 의해 문서화되며, 소스 코드를 표현하는 다이어그램은 설계에서 부수적인 것일 뿐, 설계 그 자체는 아니다
> - 잭 리브스(Jack Reeves)

* 설계 ≠ UML
* 설계 = 코드

## 소프트웨어에서 어떤 것이 잘못되는가?

재설계(renewal)보다는 지속적으로 발전시켜야 한다.

## 설계의 악취: 부패하고 있는 소프트웨어의 냄새

위 [잘못된 설계의 증상][a668b17f] 참고

  [a668b17f]: #section-1 "잘못된 설계의 증상"

### 애자일 팀은 소프트웨어가 부패하도록 내버려두지 않는다

지속적 리팩토링

## 애자일 개발자는 해야 할 일을 어떻게 알았는가?

1. 그들은 다음과 같은 애자일 실천방법으로 문제를 찾아냈다. - 유연하지 않음
2. 그들은 설계 원칙을 적용해 문제를 진단했다. - OCP, DIP
3. 그리고 적절한 디자인 패턴을 적용해 문제를 해결했다. - 전략패턴

**위와 같이 소프트웨어 개발의 세 측면 사이에서 일어나는 상호작용이 바로 설계 작업이다.**

## 가능한 좋은 상태로 설계 유지하기

* 다음은 없다. 나쁜 냄새가 나면 바로 개선한다.
* 깨진 유리창이 하나라도 생기면 슬럼화 되는 것은 금방이다.

## 결론

* **애자일의 설계는 과정이지, 결과가 아니다.**
* 시스템을 좋은 상태로 유지하려는 노력이다.

# 단일 책임 원칙(SRP)

**응집도**

## 단일 책임 원칙(SRP)

> 한 클래스는 단 한가지의 변경 이유만을 가져야 한다.
